name: Continuous Integration

on:
  pull_request:
  push:
    branches:
      - main
    paths-ignore:
      - '.github/workflows/**'
      - '**/*.md'
      - 'backup/**'
  workflow_dispatch:

permissions:
  contents: read

jobs:
  test-compression-formats:
    name: Test Compression Formats
    runs-on: ubuntu-latest
    strategy:
      matrix:
        format: [zip, tar, tgz, tbz2]
        include_root: [true, false]
        source: [test2]
        dest_config:
          - type: default
            dest: ''
            destfilename: ''
          - type: custom
            dest: 'custom_output'
            destfilename: 'custom_archive'
      fail-fast: false

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Create Test Files and Directories
        run: |
          mkdir -p test2 test3 custom_output
          echo "Test content for test2" > test2/test2.txt
          
          echo "Created directories and files:"
          ls -la test2/
          if [ "${{ matrix.dest_config.type }}" = "custom" ]; then
            ls -la ${{ matrix.dest_config.dest }}/
          fi

      - name: Test Compression
        id: compress
        uses: ./
        with:
          command: 'compress'
          source: './${{ matrix.source }}'
          format: ${{ matrix.format }}
          includeRoot: ${{ matrix.include_root }}
          dest: ${{ matrix.dest_config.dest }}
          destfilename: ${{ matrix.dest_config.destfilename }}
          verbose: 'true'

      # Set the correct source path based on configuration
      - name: Set Source Path
        id: set-path
        run: |
          if [ "${{ matrix.dest_config.type }}" = "custom" ]; then
            echo "source_path=${{ matrix.dest_config.dest }}/${{ matrix.dest_config.destfilename }}.${{ matrix.format }}" >> $GITHUB_OUTPUT
          else
            if [ "${{ matrix.include_root }}" = "true" ]; then
              echo "source_path=./${{ matrix.source }}.${{ matrix.format }}" >> $GITHUB_OUTPUT
            else
              echo "source_path=./${{ matrix.source }}/${{ matrix.source }}.${{ matrix.format }}" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Upload Compressed Artifact
        uses: actions/upload-artifact@v4
        with:
          name: compressed-${{ matrix.format }}-${{ matrix.source }}-root-${{ matrix.include_root }}-dest-${{ matrix.dest_config.type }}
          path: ${{ steps.set-path.outputs.source_path }}
          if-no-files-found: error

      - name: Test Decompression
        uses: ./
        with:
          command: 'decompress'
          source: ${{ steps.set-path.outputs.source_path }}
          format: ${{ matrix.format }}
          dest: './unpacked-${{ matrix.format }}-${{ matrix.source }}'

      - name: Verify Contents
        run: |
          # Define colors for better readability
          GREEN='\033[0;32m'
          RED='\033[0;31m'
          YELLOW='\033[0;33m'
          BLUE='\033[0;34m'
          BOLD='\033[1m'
          NC='\033[0m' # No Color
          
          echo -e "\n${BOLD}${BLUE}======== TEST CONFIGURATION ========${NC}"
          echo -e "${BOLD}Format:${NC}      ${YELLOW}${{ matrix.format }}${NC}"
          echo -e "${BOLD}Include Root:${NC} ${YELLOW}${{ matrix.include_root }}${NC}"
          echo -e "${BOLD}Destination:${NC}  ${YELLOW}${{ matrix.dest_config.type }}${NC}"
          echo -e "${BOLD}Source Path:${NC}  ${YELLOW}${{ steps.set-path.outputs.source_path }}${NC}"
          echo -e "${BOLD}Extract Path:${NC} ${YELLOW}./unpacked-${{ matrix.format }}-${{ matrix.source }}${NC}\n"
          
          # Check if unpacked directory exists
          if [ ! -d "./unpacked-${{ matrix.format }}-${{ matrix.source }}" ]; then
            echo -e "${RED}❌ FAILED: Unpacked directory does not exist!${NC}"
            exit 1
          fi
          
          echo -e "${BOLD}${BLUE}======== UNPACKED DIRECTORY STRUCTURE ========${NC}"
          find "./unpacked-${{ matrix.format }}-${{ matrix.source }}" -type f | sort | sed 's/^/  /'
          echo ""
          
          # Different verification based on includeRoot setting
          if [ "${{ matrix.include_root }}" = "true" ]; then
            echo -e "${BOLD}${BLUE}======== VERIFYING WITH ROOT DIRECTORY ========${NC}"
            expected_path="./unpacked-${{ matrix.format }}-${{ matrix.source }}/${{ matrix.source }}/${{ matrix.source }}.txt"
            
            if [ -f "$expected_path" ]; then
              echo -e "${GREEN}✅ SUCCESS: Root directory structure preserved${NC}"
              echo -e "${BOLD}Content of $expected_path:${NC}"
              echo -e "${YELLOW}$(cat "$expected_path")${NC}"
            else
              echo -e "${RED}❌ FAILED: Expected file $expected_path not found!${NC}"
              exit 1
            fi
          else
            echo -e "${BOLD}${BLUE}======== VERIFYING WITHOUT ROOT DIRECTORY ========${NC}"
            expected_path="./unpacked-${{ matrix.format }}-${{ matrix.source }}/${{ matrix.source }}.txt"
            
            if [ -f "$expected_path" ]; then
              echo -e "${GREEN}✅ SUCCESS: Files extracted without root directory${NC}"
              echo -e "${BOLD}Content of $expected_path:${NC}"
              echo -e "${YELLOW}$(cat "$expected_path")${NC}"
            else
              echo -e "${RED}❌ FAILED: Expected file $expected_path not found!${NC}"
              exit 1
            fi
          fi
          
          echo -e "\n${GREEN}${BOLD}✓ ALL VERIFICATION TESTS PASSED${NC}\n"

      - name: Print Compression Output
        run: |
          echo "Compression output for ${{ matrix.format }} (includeRoot: ${{ matrix.include_root }}): ${{ steps.compress.outputs.file_path }}"

  test-features-and-errors:
    name: Test Features and Error Handling
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      # Case 1: Should fail (fail_on_error: true)
      - name: Test Non-existent Source (with fail_on_error)
        id: test_fail
        uses: ./
        continue-on-error: true  # Allow the workflow to continue even if this step fails
        with:
          command: 'compress'
          source: './nonexistent'
          format: 'zip'
          fail_on_error: 'true'
          verbose: 'true'

      - name: Verify Expected Failure
        run: |
          # Define colors for better readability
          GREEN='\033[0;32m'
          RED='\033[0;31m'
          YELLOW='\033[0;33m'
          BLUE='\033[0;34m'
          BOLD='\033[1m'
          NC='\033[0m' # No Color
          
          echo -e "\n${BOLD}${BLUE}======== TEST CASE: EXPECTED FAILURE ========${NC}"
          echo -e "${BOLD}Test:${NC} Non-existent source with fail_on_error=true"
          echo -e "${BOLD}Expected Outcome:${NC} Action should fail"
          echo -e "${BOLD}Actual Outcome:${NC} ${YELLOW}${{ steps.test_fail.outcome }}${NC}\n"
          
          if [ "${{ steps.test_fail.outcome }}" != "failure" ]; then
            echo -e "${RED}❌ TEST FAILED: Expected failure but got success${NC}"
            exit 1
          else
            echo -e "${GREEN}✅ TEST PASSED: Action failed as expected with fail_on_error=true${NC}"
          fi

      # Case 2: Should complete with warning (fail_on_error: false)
      - name: Test Non-existent Source (without fail_on_error)
        id: test_no_fail
        uses: ./
        with:
          command: 'compress'
          source: './nonexistent'
          format: 'zip'
          fail_on_error: 'false'
          verbose: 'true'

      - name: Verify Warning Behavior
        run: |
          # Define colors for better readability
          GREEN='\033[0;32m'
          RED='\033[0;31m'
          YELLOW='\033[0;33m'
          BLUE='\033[0;34m'
          BOLD='\033[1m'
          NC='\033[0m' # No Color
          
          echo -e "\n${BOLD}${BLUE}======== TEST CASE: WARNING BEHAVIOR ========${NC}"
          echo -e "${BOLD}Test:${NC} Non-existent source with fail_on_error=false"
          echo -e "${BOLD}Expected Outcome:${NC} Action should complete with warning"
          echo -e "${BOLD}Actual Outcome:${NC} ${YELLOW}${{ steps.test_no_fail.outcome }}${NC}\n"
          
          if [ "${{ steps.test_no_fail.outcome }}" = "success" ]; then
            echo -e "${GREEN}✅ TEST PASSED: Action completed with warning as expected${NC}"
          else
            echo -e "${RED}❌ TEST FAILED: Action failed when it should have completed with warning${NC}"
            exit 1
          fi

      # Additional test case for valid source but with warning
      - name: Create Test Directory with Warning Case
        run: |
          mkdir -p test_warning
          touch test_warning/.gitkeep
          
          # Define colors for better readability
          BLUE='\033[0;34m'
          BOLD='\033[1m'
          NC='\033[0m' # No Color
          
          echo -e "\n${BOLD}${BLUE}======== PREPARING TEST CASE: EMPTY DIRECTORY ========${NC}"
          echo -e "Created empty test directory with only .gitkeep file:"
          ls -la test_warning/

      - name: Test Valid Source with Warning
        id: test_warning
        uses: ./
        with:
          command: 'compress'
          source: './test_warning'
          format: 'zip'
          fail_on_error: 'false'
          verbose: 'true'

      - name: Verify Warning Case
        run: |
          # Define colors for better readability
          GREEN='\033[0;32m'
          RED='\033[0;31m'
          YELLOW='\033[0;33m'
          BLUE='\033[0;34m'
          BOLD='\033[1m'
          NC='\033[0m' # No Color
          
          echo -e "\n${BOLD}${BLUE}======== TEST CASE: EMPTY DIRECTORY ========${NC}"
          echo -e "${BOLD}Test:${NC} Empty directory with fail_on_error=false"
          echo -e "${BOLD}Expected Outcome:${NC} Action should complete successfully"
          echo -e "${BOLD}Actual Outcome:${NC} ${YELLOW}${{ steps.test_warning.outcome }}${NC}\n"
          
          if [ "${{ steps.test_warning.outcome }}" = "success" ]; then
            echo -e "${GREEN}✅ TEST PASSED: Action completed successfully with empty directory${NC}"
          else
            echo -e "${RED}❌ TEST FAILED: Action failed with empty directory${NC}"
            exit 1
          fi
          
      - name: Test Summary
        run: |
          # Define colors for better readability
          GREEN='\033[0;32m'
          BLUE='\033[0;34m'
          BOLD='\033[1m'
          NC='\033[0m' # No Color
          
          echo -e "\n${BOLD}${BLUE}======== ERROR HANDLING TEST SUMMARY ========${NC}"
          echo -e "${GREEN}${BOLD}✓ All error handling tests passed successfully${NC}"
          echo -e "${BOLD}Tests verified:${NC}"
          echo -e "  • Expected failure with fail_on_error=true"
          echo -e "  • Warning behavior with fail_on_error=false"
          echo -e "  • Empty directory handling\n"

  test-github-workspace:
    name: Test GitHub Workspace Path
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Create Test Files
        run: |
          echo "Test content" > test.txt
          mkdir -p subdir
          echo "Subdir content" > subdir/subdir.txt
          echo "Created test files:"
          ls -la
          ls -la subdir/

      # Case 1: GitHub Workspace with default settings
      - name: Test GitHub Workspace Path (Default)
        id: test_workspace_default
        uses: ./
        with:
          command: compress
          source: ${{ github.workspace }}
          format: zip
          dest: './output'
          destfilename: 'workspace_default'
          verbose: 'true'

      # Case 2: GitHub Workspace with includeRoot false
      - name: Test GitHub Workspace Path (No Root)
        id: test_workspace_no_root
        uses: ./
        with:
          command: compress
          source: ${{ github.workspace }}
          format: zip
          includeRoot: 'false'
          dest: './output'
          destfilename: 'workspace_no_root'
          verbose: 'true'

      # Verify the results
      - name: Verify Compression Results
        run: |
          # Define colors for better readability
          GREEN='\033[0;32m'
          RED='\033[0;31m'
          YELLOW='\033[0;33m'
          BLUE='\033[0;34m'
          BOLD='\033[1m'
          NC='\033[0m' # No Color
          
          echo -e "\n${BOLD}${BLUE}======== GITHUB WORKSPACE COMPRESSION TEST ========${NC}"
          echo -e "${BOLD}Output Directory Contents:${NC}"
          ls -la ./output/ | sed 's/^/  /'
          
          # Test default case (includeRoot: true)
          echo -e "\n${BOLD}${BLUE}======== CASE 1: DEFAULT WORKSPACE COMPRESSION ========${NC}"
          if [ -f "./output/workspace_default.zip" ]; then
            echo -e "${GREEN}✅ SUCCESS: Default workspace compression${NC}"
            echo -e "${BOLD}Archive Contents:${NC}"
            unzip -l ./output/workspace_default.zip | sed 's/^/  /'
          else
            echo -e "${RED}❌ FAILED: Default workspace compression${NC}"
            exit 1
          fi
          
          # Test no root case (includeRoot: false)
          echo -e "\n${BOLD}${BLUE}======== CASE 2: NO ROOT WORKSPACE COMPRESSION ========${NC}"
          if [ -f "./output/workspace_no_root.zip" ]; then
            echo -e "${GREEN}✅ SUCCESS: No root workspace compression${NC}"
            echo -e "${BOLD}Archive Contents:${NC}"
            unzip -l ./output/workspace_no_root.zip | sed 's/^/  /'
          else
            echo -e "${RED}❌ FAILED: No root workspace compression${NC}"
            exit 1
          fi

      # Test decompression
      - name: Test Decompression (Default)
        uses: ./
        with:
          command: decompress
          source: ./output/workspace_default.zip
          format: zip
          dest: './extracted_default'
          verbose: 'true'

      - name: Test Decompression (No Root)
        uses: ./
        with:
          command: decompress
          source: ./output/workspace_no_root.zip
          format: zip
          dest: './extracted_no_root'
          verbose: 'true'

      - name: Verify Decompression Results
        run: |
          # Define colors for better readability
          GREEN='\033[0;32m'
          RED='\033[0;31m'
          YELLOW='\033[0;33m'
          BLUE='\033[0;34m'
          BOLD='\033[1m'
          NC='\033[0m' # No Color
          
          echo -e "\n${BOLD}${BLUE}======== GITHUB WORKSPACE DECOMPRESSION TEST ========${NC}"
          
          # Check default case (with root directory)
          echo -e "\n${BOLD}${BLUE}======== CASE 1: DEFAULT WORKSPACE EXTRACTION ========${NC}"
          echo -e "${BOLD}Extracted Contents:${NC}"
          find "./extracted_default" -type f | sort | sed 's/^/  /'
          
          if [ -f "./extracted_default/workspace/test.txt" ] && [ -f "./extracted_default/workspace/subdir/subdir.txt" ]; then
            echo -e "${GREEN}✅ SUCCESS: Default extraction verified${NC}"
            echo -e "${BOLD}Content of test.txt:${NC}"
            echo -e "${YELLOW}$(cat ./extracted_default/workspace/test.txt)${NC}"
            echo -e "${BOLD}Content of subdir/subdir.txt:${NC}"
            echo -e "${YELLOW}$(cat ./extracted_default/workspace/subdir/subdir.txt)${NC}"
          else
            echo -e "${RED}❌ FAILED: Default extraction failed${NC}"
            exit 1
          fi
          
          # Check no root case (files directly in directory)
          echo -e "\n${BOLD}${BLUE}======== CASE 2: NO ROOT WORKSPACE EXTRACTION ========${NC}"
          echo -e "${BOLD}Extracted Contents:${NC}"
          find "./extracted_no_root" -type f | sort | sed 's/^/  /'
          
          if [ -f "./extracted_no_root/test.txt" ] && [ -f "./extracted_no_root/subdir/subdir.txt" ]; then
            echo -e "${GREEN}✅ SUCCESS: No root extraction verified${NC}"
            echo -e "${BOLD}Content of test.txt:${NC}"
            echo -e "${YELLOW}$(cat ./extracted_no_root/test.txt)${NC}"
            echo -e "${BOLD}Content of subdir/subdir.txt:${NC}"
            echo -e "${YELLOW}$(cat ./extracted_no_root/subdir/subdir.txt)${NC}"
          else
            echo -e "${RED}❌ FAILED: No root extraction failed${NC}"
            exit 1
          fi
          
          echo -e "\n${GREEN}${BOLD}✓ ALL GITHUB WORKSPACE TESTS PASSED${NC}\n"

  test-github-workspace-paths:
    name: Test GitHub Workspace Path Variants
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Create Test Files
        run: |
          echo "Test content 1" > test1.txt
          echo "Test content 2" > test2.txt
          mkdir -p subdir
          echo "Subdir content" > subdir/test3.txt
          
          echo "Created test files:"
          ls -la
          ls -la subdir/

      # Case 1: Direct github.workspace variable
      - name: Test Direct Workspace Path
        id: test_direct
        uses: ./
        with:
          command: compress
          source: ${{ github.workspace }}
          format: zip
          dest: './output1'
          destfilename: 'direct_workspace'
          verbose: 'true'
          includeRoot: 'false'

      # Case 2: Workspace path with space
      - name: Test Workspace Path with Space
        id: test_with_space
        uses: ./
        with:
          command: compress
          source: ' ${{ github.workspace }}'
          format: zip
          dest: './output2'
          destfilename: 'space_workspace'
          verbose: 'true'
          includeRoot: 'false'

      # Verify both archives
      - name: Verify Compression Results
        run: |
          # Define colors for better readability
          GREEN='\033[0;32m'
          RED='\033[0;31m'
          YELLOW='\033[0;33m'
          BLUE='\033[0;34m'
          BOLD='\033[1m'
          NC='\033[0m' # No Color
          
          echo -e "\n${BOLD}${BLUE}======== WORKSPACE PATH VARIANTS TEST ========${NC}"
          
          echo -e "${BOLD}${BLUE}======== OUTPUT DIRECTORIES CONTENTS ========${NC}"
          echo -e "${BOLD}Output1 Directory:${NC}"
          ls -la ./output1/ | sed 's/^/  /'
          echo -e "\n${BOLD}Output2 Directory:${NC}"
          ls -la ./output2/ | sed 's/^/  /'
          
          # Test direct case
          echo -e "\n${BOLD}${BLUE}======== CASE 1: DIRECT WORKSPACE PATH ========${NC}"
          if [ -f "./output1/direct_workspace.zip" ]; then
            echo -e "${GREEN}✅ SUCCESS: Direct workspace compression${NC}"
            echo -e "${BOLD}Archive Contents:${NC}"
            unzip -l ./output1/direct_workspace.zip | sed 's/^/  /'
          else
            echo -e "${RED}❌ FAILED: Direct workspace compression${NC}"
            exit 1
          fi
          
          # Test space case
          echo -e "\n${BOLD}${BLUE}======== CASE 2: WORKSPACE PATH WITH SPACE ========${NC}"
          if [ -f "./output2/space_workspace.zip" ]; then
            echo -e "${GREEN}✅ SUCCESS: Space-padded workspace compression${NC}"
            echo -e "${BOLD}Archive Contents:${NC}"
            unzip -l ./output2/space_workspace.zip | sed 's/^/  /'
          else
            echo -e "${RED}❌ FAILED: Space-padded workspace compression${NC}"
            exit 1
          fi

      # Test decompression for both cases
      - name: Test Decompression (Direct)
        uses: ./
        with:
          command: decompress
          source: ./output1/direct_workspace.zip
          format: zip
          dest: './extracted_direct'
          verbose: 'true'

      - name: Test Decompression (Space)
        uses: ./
        with:
          command: decompress
          source: ./output2/space_workspace.zip
          format: zip
          dest: './extracted_space'
          verbose: 'true'

      - name: Verify Decompression Results
        run: |
          # Define colors for better readability
          GREEN='\033[0;32m'
          RED='\033[0;31m'
          YELLOW='\033[0;33m'
          BLUE='\033[0;34m'
          BOLD='\033[1m'
          NC='\033[0m' # No Color
          
          echo -e "\n${BOLD}${BLUE}======== WORKSPACE PATH VARIANTS EXTRACTION TEST ========${NC}"
          
          echo -e "${BOLD}${BLUE}======== EXTRACTION DIRECTORY CONTENTS ========${NC}"
          echo -e "${BOLD}Direct Extraction Directory:${NC}"
          find "./extracted_direct" -type f | sort | sed 's/^/  /'
          echo -e "\n${BOLD}Space-padded Extraction Directory:${NC}"
          find "./extracted_space" -type f | sort | sed 's/^/  /'
          
          # Verify file contents for both cases
          extraction_success=true
          
          for dir in "./extracted_direct" "./extracted_space"; do
            dir_name=$(basename "$dir")
            echo -e "\n${BOLD}${BLUE}======== VERIFYING $dir_name ========${NC}"
            
            if [ -f "$dir/test1.txt" ] && [ -f "$dir/test2.txt" ] && [ -f "$dir/subdir/test3.txt" ]; then
              echo -e "${GREEN}✅ SUCCESS: Extraction verified for $dir${NC}"
              echo -e "${BOLD}Content of test files:${NC}"
              echo -e "${YELLOW}test1.txt:${NC} ${YELLOW}$(cat "$dir/test1.txt")${NC}"
              echo -e "${YELLOW}test2.txt:${NC} ${YELLOW}$(cat "$dir/test2.txt")${NC}"
              echo -e "${YELLOW}subdir/test3.txt:${NC} ${YELLOW}$(cat "$dir/subdir/test3.txt")${NC}"
            else
              echo -e "${RED}❌ FAILED: Extraction failed for $dir${NC}"
              extraction_success=false
              break
            fi
          done
          
          if [ "$extraction_success" = false ]; then
            exit 1
          fi
          
          echo -e "\n${GREEN}${BOLD}✓ ALL WORKSPACE VARIANT TESTS PASSED${NC}\n"

  test-exclude-functionality:
    name: Test Exclude Functionality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Create Test Structure
        run: |
          # Creating a Test Directory Structure
          mkdir -p test_exclude/include_folder test_exclude/exclude_folder
          mkdir -p test_exclude/mixed_folder
          
          # Create a file to be included
          echo "File to include" > test_exclude/include_file.txt
          echo "Folder file to include" > test_exclude/include_folder/include.txt
          
          # Create a file to be excluded
          echo "File to exclude" > test_exclude/exclude_file.txt
          echo "Folder file to exclude" > test_exclude/exclude_folder/exclude.txt
          
          # Create a mixed file
          echo "Mixed file 1 - include" > test_exclude/mixed_folder/file1.txt
          echo "Mixed file 2 - exclude" > test_exclude/mixed_folder/file2.log
          
          # Check the created structure
          echo "Created test structure:"
          find test_exclude -type f | sort

      - name: Test Single File Exclusion
        id: exclude_single_file
        uses: ./
        with:
          command: 'compress'
          source: './test_exclude'
          format: 'zip'
          dest: './output'
          destfilename: 'single_file_exclude'
          exclude: 'exclude_file.txt'
          verbose: 'true'

      - name: Test Directory Exclusion
        id: exclude_directory
        uses: ./
        with:
          command: 'compress'
          source: './test_exclude'
          format: 'zip'
          dest: './output'
          destfilename: 'directory_exclude'
          exclude: 'exclude_folder'
          verbose: 'true'

      - name: Test Multiple Exclusions
        id: exclude_multiple
        uses: ./
        with:
          command: 'compress'
          source: './test_exclude'
          format: 'zip'
          dest: './output'
          destfilename: 'multiple_exclude'
          exclude: 'exclude_file.txt exclude_folder/* mixed_folder/*.log'
          verbose: 'true'

      - name: Test Wildcard Pattern Exclusion
        id: exclude_pattern
        uses: ./
        with:
          command: 'compress'
          source: './test_exclude'
          format: 'zip'
          dest: './output'
          destfilename: 'pattern_exclude'
          exclude: '*.log'
          verbose: 'true'

      - name: Test TAR Format with Exclusion
        id: exclude_tar
        uses: ./
        with:
          command: 'compress'
          source: './test_exclude'
          format: 'tar'
          dest: './output'
          destfilename: 'tar_exclude'
          exclude: 'exclude_file.txt exclude_folder'
          verbose: 'true'

      - name: Verify Exclusion Results
        run: |
          # Define colors for better readability
          GREEN='\033[0;32m'
          RED='\033[0;31m'
          YELLOW='\033[0;33m'
          BLUE='\033[0;34m'
          BOLD='\033[1m'
          NC='\033[0m' # No Color
          
          echo -e "\n${BOLD}${BLUE}======== EXCLUSION FUNCTIONALITY TEST ========${NC}"
          echo -e "${BOLD}Preparing verification directories...${NC}"
          mkdir -p verify
          
          # Check single file exclusion
          echo -e "\n${BOLD}${BLUE}======== TEST CASE 1: SINGLE FILE EXCLUSION ========${NC}"
          echo -e "${BOLD}Archive Contents:${NC}"
          unzip -l ./output/single_file_exclude.zip | sed 's/^/  /'
          unzip -q ./output/single_file_exclude.zip -d ./verify/single_file
          
          echo -e "\n${BOLD}Extracted Contents:${NC}"
          find ./verify/single_file -type f | sort | sed 's/^/  /'
          
          if grep -q "exclude_file.txt" <(find ./verify/single_file -type f); then
            echo -e "${RED}❌ FAILED: exclude_file.txt was found when it should be excluded${NC}"
            exit 1
          else
            echo -e "${GREEN}✅ SUCCESS: Single file exclusion verified${NC}"
          fi
          
          # Check directory exclusion
          echo -e "\n${BOLD}${BLUE}======== TEST CASE 2: DIRECTORY EXCLUSION ========${NC}"
          echo -e "${BOLD}Archive Contents:${NC}"
          unzip -l ./output/directory_exclude.zip | sed 's/^/  /'
          unzip -q ./output/directory_exclude.zip -d ./verify/directory
          
          echo -e "\n${BOLD}Extracted Contents:${NC}"
          find ./verify/directory -type f | sort | sed 's/^/  /'
          
          if grep -q "exclude_folder" <(find ./verify/directory -type d); then
            echo -e "${RED}❌ FAILED: exclude_folder was found when it should be excluded${NC}"
            exit 1
          else
            echo -e "${GREEN}✅ SUCCESS: Directory exclusion verified${NC}"
          fi
          
          # Check multiple exclusion
          echo -e "\n${BOLD}${BLUE}======== TEST CASE 3: MULTIPLE EXCLUSIONS ========${NC}"
          echo -e "${BOLD}Archive Contents:${NC}"
          unzip -l ./output/multiple_exclude.zip | sed 's/^/  /'
          unzip -q ./output/multiple_exclude.zip -d ./verify/multiple
          
          echo -e "\n${BOLD}Extracted Contents:${NC}"
          find ./verify/multiple -type f | sort | sed 's/^/  /'
          
          EXCLUSION_FAILED=false
          if grep -q "exclude_file.txt" <(find ./verify/multiple -type f); then
            echo -e "${RED}❌ FAILED: exclude_file.txt was found${NC}"
            EXCLUSION_FAILED=true
          fi
          
          if grep -q "exclude_folder" <(find ./verify/multiple -type d); then
            echo -e "${RED}❌ FAILED: exclude_folder was found${NC}"
            EXCLUSION_FAILED=true
          fi
          
          if grep -q ".log" <(find ./verify/multiple/mixed_folder -type f 2>/dev/null || echo ""); then
            echo -e "${RED}❌ FAILED: .log files were found in mixed_folder${NC}"
            EXCLUSION_FAILED=true
          fi
          
          if [ "$EXCLUSION_FAILED" = "false" ]; then
            echo -e "${GREEN}✅ SUCCESS: Multiple exclusion patterns verified${NC}"
          else
            exit 1
          fi
          
          # Check pattern exclusion
          echo -e "\n${BOLD}${BLUE}======== TEST CASE 4: WILDCARD PATTERN EXCLUSION ========${NC}"
          echo -e "${BOLD}Archive Contents:${NC}"
          unzip -l ./output/pattern_exclude.zip | sed 's/^/  /'
          unzip -q ./output/pattern_exclude.zip -d ./verify/pattern
          
          echo -e "\n${BOLD}Extracted Contents:${NC}"
          find ./verify/pattern -type f | sort | sed 's/^/  /'
          
          if grep -q ".log" <(find ./verify/pattern -type f); then
            echo -e "${RED}❌ FAILED: .log files were found when they should be excluded${NC}"
            exit 1
          else
            echo -e "${GREEN}✅ SUCCESS: Pattern exclusion verified${NC}"
          fi
          
          # TAR format exclusion verification
          echo -e "\n${BOLD}${BLUE}======== TEST CASE 5: TAR FORMAT EXCLUSION ========${NC}"
          echo -e "${BOLD}Archive Contents:${NC}"
          tar -tvf ./output/tar_exclude.tar | sed 's/^/  /'
          mkdir -p verify/tar
          tar -xf ./output/tar_exclude.tar -C ./verify/tar
          
          echo -e "\n${BOLD}Extracted Contents:${NC}"
          find ./verify/tar -type f | sort | sed 's/^/  /'
          
          TAR_EXCLUSION_FAILED=false
          if grep -q "exclude_file.txt" <(find ./verify/tar -type f); then
            echo -e "${RED}❌ FAILED: exclude_file.txt was found in TAR archive${NC}"
            TAR_EXCLUSION_FAILED=true
          fi
          
          if grep -q "exclude_folder" <(find ./verify/tar -type d); then
            echo -e "${RED}❌ FAILED: exclude_folder was found in TAR archive${NC}"
            TAR_EXCLUSION_FAILED=true
          fi
          
          if [ "$TAR_EXCLUSION_FAILED" = "false" ]; then
            echo -e "${GREEN}✅ SUCCESS: TAR exclusion verified${NC}"
          else
            exit 1
          fi
          
          echo -e "\n${GREEN}${BOLD}✓ ALL EXCLUSION TESTS PASSED${NC}\n"

  test-glob-patterns:
    name: Test Glob Pattern Matching
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Create Test Files for Glob Patterns
        run: |
          # Create directory structure with various file types
          mkdir -p test_glob/docs test_glob/images test_glob/data
          mkdir -p test_glob/nested/level1/level2
          
          # Create .doc files
          echo "Document 1" > test_glob/docs/file1.doc
          echo "Document 2" > test_glob/docs/file2.doc
          echo "Document 3" > test_glob/nested/file3.doc
          echo "Document 4" > test_glob/nested/level1/file4.doc
          echo "Document 5" > test_glob/nested/level1/level2/file5.doc
          
          # Create other file types
          echo "Text file" > test_glob/data/data.txt
          echo "Image file" > test_glob/images/image.jpg
          echo "Another text" > test_glob/nested/readme.txt
          
          # Create files with multiple extensions
          echo "Markdown 1" > test_glob/docs/readme.md
          echo "Markdown 2" > test_glob/nested/level1/guide.md
          
          echo "Created test structure for glob patterns:"
          find test_glob -type f | sort

      - name: Test Glob Pattern - All .doc Files
        id: glob_doc_files
        uses: ./
        with:
          command: 'compress'
          source: 'test_glob/**/*.doc'
          format: 'zip'
          dest: './glob_output'
          destfilename: 'all_doc_files'
          verbose: 'true'

      - name: Test Glob Pattern - Single Directory Wildcard
        id: glob_single_dir
        uses: ./
        with:
          command: 'compress'
          source: 'test_glob/docs/*.doc'
          format: 'zip'
          dest: './glob_output'
          destfilename: 'docs_only'
          verbose: 'true'

      - name: Test Glob Pattern - All .txt Files
        id: glob_txt_files
        uses: ./
        with:
          command: 'compress'
          source: 'test_glob/**/*.txt'
          format: 'tar'
          dest: './glob_output'
          destfilename: 'all_txt_files'
          verbose: 'true'

      - name: Test Glob Pattern - All .md Files
        id: glob_md_files
        uses: ./
        with:
          command: 'compress'
          source: 'test_glob/**/*.md'
          format: 'tgz'
          dest: './glob_output'
          destfilename: 'all_md_files'
          verbose: 'true'

      - name: Test Glob Pattern - Specific Nested Path
        id: glob_nested_path
        uses: ./
        with:
          command: 'compress'
          source: 'test_glob/nested/**/*.doc'
          format: 'zip'
          dest: './glob_output'
          destfilename: 'nested_docs'
          verbose: 'true'

      - name: Verify Glob Pattern Results
        run: |
          # Define colors for better readability
          GREEN='\033[0;32m'
          RED='\033[0;31m'
          YELLOW='\033[0;33m'
          BLUE='\033[0;34m'
          BOLD='\033[1m'
          NC='\033[0m' # No Color
          
          echo -e "\n${BOLD}${BLUE}======== GLOB PATTERN MATCHING TEST ========${NC}"
          echo -e "${BOLD}Output Directory Contents:${NC}"
          ls -la ./glob_output/ | sed 's/^/  /'
          
          # Test Case 1: All .doc files
          echo -e "\n${BOLD}${BLUE}======== TEST CASE 1: ALL .doc FILES PATTERN ========${NC}"
          echo -e "${BOLD}Pattern:${NC} ${YELLOW}test_glob/**/*.doc${NC}"
          
          if [ ! -f "./glob_output/all_doc_files.zip" ]; then
            echo -e "${RED}❌ FAILED: Archive not created${NC}"
            exit 1
          fi
          
          echo -e "${BOLD}Archive Contents:${NC}"
          unzip -l ./glob_output/all_doc_files.zip | sed 's/^/  /'
          
          mkdir -p verify/glob_doc
          unzip -q ./glob_output/all_doc_files.zip -d ./verify/glob_doc
          
          doc_count=$(find ./verify/glob_doc -name "*.doc" | wc -l)
          echo -e "${BOLD}Number of .doc files extracted:${NC} ${YELLOW}$doc_count${NC}"
          
          if [ "$doc_count" -eq 5 ]; then
            echo -e "${GREEN}✅ SUCCESS: All 5 .doc files matched and compressed${NC}"
          else
            echo -e "${RED}❌ FAILED: Expected 5 .doc files but found $doc_count${NC}"
            exit 1
          fi
          
          # Test Case 2: Single directory wildcard
          echo -e "\n${BOLD}${BLUE}======== TEST CASE 2: SINGLE DIRECTORY WILDCARD ========${NC}"
          echo -e "${BOLD}Pattern:${NC} ${YELLOW}test_glob/docs/*.doc${NC}"
          
          if [ ! -f "./glob_output/docs_only.zip" ]; then
            echo -e "${RED}❌ FAILED: Archive not created${NC}"
            exit 1
          fi
          
          echo -e "${BOLD}Archive Contents:${NC}"
          unzip -l ./glob_output/docs_only.zip | sed 's/^/  /'
          
          mkdir -p verify/glob_docs
          unzip -q ./glob_output/docs_only.zip -d ./verify/glob_docs
          
          docs_count=$(find ./verify/glob_docs -name "*.doc" | wc -l)
          echo -e "${BOLD}Number of .doc files extracted:${NC} ${YELLOW}$docs_count${NC}"
          
          if [ "$docs_count" -eq 2 ]; then
            echo -e "${GREEN}✅ SUCCESS: Only docs directory .doc files (2) matched${NC}"
          else
            echo -e "${RED}❌ FAILED: Expected 2 .doc files but found $docs_count${NC}"
            exit 1
          fi
          
          # Test Case 3: All .txt files
          echo -e "\n${BOLD}${BLUE}======== TEST CASE 3: ALL .txt FILES PATTERN ========${NC}"
          echo -e "${BOLD}Pattern:${NC} ${YELLOW}test_glob/**/*.txt${NC}"
          
          if [ ! -f "./glob_output/all_txt_files.tar" ]; then
            echo -e "${RED}❌ FAILED: Archive not created${NC}"
            exit 1
          fi
          
          echo -e "${BOLD}Archive Contents:${NC}"
          tar -tvf ./glob_output/all_txt_files.tar | sed 's/^/  /'
          
          mkdir -p verify/glob_txt
          tar -xf ./glob_output/all_txt_files.tar -C ./verify/glob_txt
          
          txt_count=$(find ./verify/glob_txt -name "*.txt" | wc -l)
          echo -e "${BOLD}Number of .txt files extracted:${NC} ${YELLOW}$txt_count${NC}"
          
          if [ "$txt_count" -eq 2 ]; then
            echo -e "${GREEN}✅ SUCCESS: All 2 .txt files matched and compressed${NC}"
          else
            echo -e "${RED}❌ FAILED: Expected 2 .txt files but found $txt_count${NC}"
            exit 1
          fi
          
          # Test Case 4: All .md files
          echo -e "\n${BOLD}${BLUE}======== TEST CASE 4: ALL .md FILES PATTERN ========${NC}"
          echo -e "${BOLD}Pattern:${NC} ${YELLOW}test_glob/**/*.md${NC}"
          
          if [ ! -f "./glob_output/all_md_files.tgz" ]; then
            echo -e "${RED}❌ FAILED: Archive not created${NC}"
            exit 1
          fi
          
          echo -e "${BOLD}Archive Contents:${NC}"
          tar -tzf ./glob_output/all_md_files.tgz | sed 's/^/  /'
          
          mkdir -p verify/glob_md
          tar -xzf ./glob_output/all_md_files.tgz -C ./verify/glob_md
          
          md_count=$(find ./verify/glob_md -name "*.md" | wc -l)
          echo -e "${BOLD}Number of .md files extracted:${NC} ${YELLOW}$md_count${NC}"
          
          if [ "$md_count" -eq 2 ]; then
            echo -e "${GREEN}✅ SUCCESS: All 2 .md files matched and compressed${NC}"
          else
            echo -e "${RED}❌ FAILED: Expected 2 .md files but found $md_count${NC}"
            exit 1
          fi
          
          # Test Case 5: Specific nested path
          echo -e "\n${BOLD}${BLUE}======== TEST CASE 5: NESTED PATH PATTERN ========${NC}"
          echo -e "${BOLD}Pattern:${NC} ${YELLOW}test_glob/nested/**/*.doc${NC}"
          
          if [ ! -f "./glob_output/nested_docs.zip" ]; then
            echo -e "${RED}❌ FAILED: Archive not created${NC}"
            exit 1
          fi
          
          echo -e "${BOLD}Archive Contents:${NC}"
          unzip -l ./glob_output/nested_docs.zip | sed 's/^/  /'
          
          mkdir -p verify/glob_nested
          unzip -q ./glob_output/nested_docs.zip -d ./verify/glob_nested
          
          nested_count=$(find ./verify/glob_nested -name "*.doc" | wc -l)
          echo -e "${BOLD}Number of .doc files extracted:${NC} ${YELLOW}$nested_count${NC}"
          
          if [ "$nested_count" -eq 3 ]; then
            echo -e "${GREEN}✅ SUCCESS: All 3 nested .doc files matched and compressed${NC}"
          else
            echo -e "${RED}❌ FAILED: Expected 3 .doc files but found $nested_count${NC}"
            exit 1
          fi
          
          echo -e "\n${GREEN}${BOLD}✓ ALL GLOB PATTERN TESTS PASSED${NC}\n"

      - name: Test Glob Pattern - No Match Scenario
        id: glob_no_match
        uses: ./
        continue-on-error: true
        with:
          command: 'compress'
          source: 'test_glob/**/*.xyz'
          format: 'zip'
          dest: './glob_output'
          destfilename: 'no_match'
          fail_on_error: 'true'
          verbose: 'true'

      - name: Verify No Match Behavior
        run: |
          # Define colors for better readability
          GREEN='\033[0;32m'
          RED='\033[0;31m'
          YELLOW='\033[0;33m'
          BLUE='\033[0;34m'
          BOLD='\033[1m'
          NC='\033[0m' # No Color
          
          echo -e "\n${BOLD}${BLUE}======== TEST CASE: NO MATCH PATTERN ========${NC}"
          echo -e "${BOLD}Pattern:${NC} ${YELLOW}test_glob/**/*.xyz${NC}"
          echo -e "${BOLD}Expected Outcome:${NC} Action should fail (no files match)"
          echo -e "${BOLD}Actual Outcome:${NC} ${YELLOW}${{ steps.glob_no_match.outcome }}${NC}\n"
          
          if [ "${{ steps.glob_no_match.outcome }}" = "failure" ]; then
            echo -e "${GREEN}✅ TEST PASSED: Action failed as expected when no files match the pattern${NC}"
          else
            echo -e "${RED}❌ TEST FAILED: Expected failure but got success${NC}"
            exit 1
          fi

      - name: Test Glob Pattern - Preserve Structure (True)
        id: glob_preserve_true
        uses: ./
        with:
          command: 'compress'
          source: 'test_glob/**/*.doc'
          format: 'zip'
          dest: './glob_output'
          destfilename: 'preserved_structure'
          preserveGlobStructure: 'true'
          verbose: 'true'

      - name: Test Glob Pattern - Flatten Structure (False/Default)
        id: glob_preserve_false
        uses: ./
        with:
          command: 'compress'
          source: 'test_glob/**/*.doc'
          format: 'zip'
          dest: './glob_output'
          destfilename: 'flattened_structure'
          preserveGlobStructure: 'false'
          verbose: 'true'

      - name: Verify Structure Preservation
        run: |
          # Define colors for better readability
          GREEN='\033[0;32m'
          RED='\033[0;31m'
          YELLOW='\033[0;33m'
          BLUE='\033[0;34m'
          BOLD='\033[1m'
          NC='\033[0m' # No Color
          
          echo -e "\n${BOLD}${BLUE}======== STRUCTURE PRESERVATION TEST ========${NC}"
          
          # Test Case 1: Preserved Structure
          echo -e "\n${BOLD}${BLUE}======== TEST CASE 1: PRESERVED STRUCTURE (preserveGlobStructure: true) ========${NC}"
          
          if [ ! -f "./glob_output/preserved_structure.zip" ]; then
            echo -e "${RED}❌ FAILED: Archive not created${NC}"
            exit 1
          fi
          
          echo -e "${BOLD}Archive Contents:${NC}"
          unzip -l ./glob_output/preserved_structure.zip | sed 's/^/  /'
          
          mkdir -p verify/preserved
          unzip -q ./glob_output/preserved_structure.zip -d ./verify/preserved
          
          echo -e "\n${BOLD}Extracted Structure:${NC}"
          find ./verify/preserved -type f | sort | sed 's/^/  /'
          
          # Check if directory structure is preserved
          preserved_count=0
          if [ -f "./verify/preserved/test_glob/docs/file1.doc" ]; then
            echo -e "${GREEN}  ✓ Found test_glob/docs/file1.doc${NC}"
            ((preserved_count++))
          fi
          if [ -f "./verify/preserved/test_glob/docs/file2.doc" ]; then
            echo -e "${GREEN}  ✓ Found test_glob/docs/file2.doc${NC}"
            ((preserved_count++))
          fi
          if [ -f "./verify/preserved/test_glob/nested/file3.doc" ]; then
            echo -e "${GREEN}  ✓ Found test_glob/nested/file3.doc${NC}"
            ((preserved_count++))
          fi
          if [ -f "./verify/preserved/test_glob/nested/level1/file4.doc" ]; then
            echo -e "${GREEN}  ✓ Found test_glob/nested/level1/file4.doc${NC}"
            ((preserved_count++))
          fi
          if [ -f "./verify/preserved/test_glob/nested/level1/level2/file5.doc" ]; then
            echo -e "${GREEN}  ✓ Found test_glob/nested/level1/level2/file5.doc${NC}"
            ((preserved_count++))
          fi
          
          if [ "$preserved_count" -eq 5 ]; then
            echo -e "${GREEN}✅ SUCCESS: Directory structure preserved correctly (all 5 files with paths)${NC}"
          else
            echo -e "${RED}❌ FAILED: Expected 5 files with preserved structure but found $preserved_count${NC}"
            exit 1
          fi
          
          # Test Case 2: Flattened Structure
          echo -e "\n${BOLD}${BLUE}======== TEST CASE 2: FLATTENED STRUCTURE (preserveGlobStructure: false) ========${NC}"
          
          if [ ! -f "./glob_output/flattened_structure.zip" ]; then
            echo -e "${RED}❌ FAILED: Archive not created${NC}"
            exit 1
          fi
          
          echo -e "${BOLD}Archive Contents:${NC}"
          unzip -l ./glob_output/flattened_structure.zip | sed 's/^/  /'
          
          mkdir -p verify/flattened
          unzip -q ./glob_output/flattened_structure.zip -d ./verify/flattened
          
          echo -e "\n${BOLD}Extracted Structure:${NC}"
          find ./verify/flattened -type f | sort | sed 's/^/  /'
          
          # Check if files are flattened (all at root level)
          flattened_count=$(find ./verify/flattened -maxdepth 1 -name "*.doc" | wc -l)
          total_count=$(find ./verify/flattened -name "*.doc" | wc -l)
          
          echo -e "${BOLD}Files at root level:${NC} ${YELLOW}$flattened_count${NC}"
          echo -e "${BOLD}Total files:${NC} ${YELLOW}$total_count${NC}"
          
          if [ "$flattened_count" -eq "$total_count" ] && [ "$total_count" -eq 5 ]; then
            echo -e "${GREEN}✅ SUCCESS: All files flattened to root level (5 files without subdirectories)${NC}"
            
            # List flattened files
            echo -e "\n${BOLD}Flattened files:${NC}"
            find ./verify/flattened -maxdepth 1 -name "*.doc" -exec basename {} \; | sort | sed 's/^/  /'
          else
            echo -e "${RED}❌ FAILED: Expected all 5 files at root level, found $flattened_count at root out of $total_count total${NC}"
            exit 1
          fi
          
          echo -e "\n${GREEN}${BOLD}✓ STRUCTURE PRESERVATION TESTS PASSED${NC}\n"

      - name: Test Same Filename Conflict with Preserved Structure
        run: |
          # Define colors for better readability
          GREEN='\033[0;32m'
          RED='\033[0;31m'
          YELLOW='\033[0;33m'
          BLUE='\033[0;34m'
          BOLD='\033[1m'
          NC='\033[0m' # No Color
          
          echo -e "\n${BOLD}${BLUE}======== SAME FILENAME CONFLICT TEST ========${NC}"
          
          # Create test structure with same filename in different directories
          mkdir -p conflict_test/dir1 conflict_test/dir2 conflict_test/dir3
          echo "File in dir1" > conflict_test/dir1/file.txt
          echo "File in dir2" > conflict_test/dir2/file.txt
          echo "File in dir3" > conflict_test/dir3/file.txt
          
          echo -e "${BOLD}Created test structure:${NC}"
          find conflict_test -type f | sort | sed 's/^/  /'
          echo ""

      - name: Test Conflict - Preserved Structure
        id: conflict_preserve
        uses: ./
        with:
          command: 'compress'
          source: 'conflict_test/**/*.txt'
          format: 'zip'
          dest: './glob_output'
          destfilename: 'conflict_preserved'
          preserveGlobStructure: 'true'
          verbose: 'true'

      - name: Test Conflict - Flattened Structure
        id: conflict_flatten
        uses: ./
        with:
          command: 'compress'
          source: 'conflict_test/**/*.txt'
          format: 'zip'
          dest: './glob_output'
          destfilename: 'conflict_flattened'
          preserveGlobStructure: 'false'
          verbose: 'true'

      - name: Verify Conflict Handling
        run: |
          # Define colors for better readability
          GREEN='\033[0;32m'
          RED='\033[0;31m'
          YELLOW='\033[0;33m'
          BLUE='\033[0;34m'
          BOLD='\033[1m'
          NC='\033[0m' # No Color
          
          echo -e "\n${BOLD}${BLUE}======== FILENAME CONFLICT HANDLING TEST ========${NC}"
          
          # Test Case 1: Preserved structure (no conflicts)
          echo -e "\n${BOLD}${BLUE}======== PRESERVED STRUCTURE (No Conflicts) ========${NC}"
          
          mkdir -p verify/conflict_preserved
          unzip -q ./glob_output/conflict_preserved.zip -d ./verify/conflict_preserved
          
          echo -e "${BOLD}Extracted Structure:${NC}"
          find ./verify/conflict_preserved -type f | sort | sed 's/^/  /'
          
          # Verify all 3 files exist with their paths
          if [ -f "./verify/conflict_preserved/conflict_test/dir1/file.txt" ] && \
             [ -f "./verify/conflict_preserved/conflict_test/dir2/file.txt" ] && \
             [ -f "./verify/conflict_preserved/conflict_test/dir3/file.txt" ]; then
            echo -e "${GREEN}✅ SUCCESS: All 3 files preserved with directory structure (no conflicts)${NC}"
            
            # Verify content is different
            echo -e "\n${BOLD}File Contents:${NC}"
            echo -e "${YELLOW}dir1/file.txt:${NC} $(cat ./verify/conflict_preserved/conflict_test/dir1/file.txt)"
            echo -e "${YELLOW}dir2/file.txt:${NC} $(cat ./verify/conflict_preserved/conflict_test/dir2/file.txt)"
            echo -e "${YELLOW}dir3/file.txt:${NC} $(cat ./verify/conflict_preserved/conflict_test/dir3/file.txt)"
          else
            echo -e "${RED}❌ FAILED: Missing files in preserved structure${NC}"
            exit 1
          fi
          
          # Test Case 2: Flattened structure (handles conflicts)
          echo -e "\n${BOLD}${BLUE}======== FLATTENED STRUCTURE (With Conflict Handling) ========${NC}"
          
          mkdir -p verify/conflict_flattened
          unzip -q ./glob_output/conflict_flattened.zip -d ./verify/conflict_flattened
          
          echo -e "${BOLD}Extracted Files:${NC}"
          find ./verify/conflict_flattened -type f | sort | sed 's/^/  /'
          
          # Count files (should be 3 with numbered suffixes)
          file_count=$(find ./verify/conflict_flattened -name "file*.txt" | wc -l)
          
          if [ "$file_count" -eq 3 ]; then
            echo -e "${GREEN}✅ SUCCESS: Conflict handled correctly (3 files with unique names)${NC}"
            
            echo -e "\n${BOLD}Flattened files with conflict resolution:${NC}"
            find ./verify/conflict_flattened -name "file*.txt" -exec basename {} \; | sort | sed 's/^/  /'
          else
            echo -e "${RED}❌ FAILED: Expected 3 files but found $file_count${NC}"
            exit 1
          fi
          
          echo -e "\n${GREEN}${BOLD}✓ FILENAME CONFLICT TESTS PASSED${NC}\n"

      - name: Upload Glob Pattern Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: glob-pattern-archives
          path: |
            ./glob_output/*.zip
            ./glob_output/*.tar
            ./glob_output/*.tgz
          if-no-files-found: error

      - name: Glob Pattern Test Summary
        run: |
          # Define colors for better readability
          GREEN='\033[0;32m'
          BLUE='\033[0;34m'
          BOLD='\033[1m'
          NC='\033[0m' # No Color
          
          echo -e "\n${BOLD}${BLUE}======== GLOB PATTERN TEST SUMMARY ========${NC}"
          echo -e "${GREEN}${BOLD}✓ All glob pattern tests passed successfully${NC}"
          echo -e "${BOLD}Tests verified:${NC}"
          echo -e "  • Recursive pattern matching (**/*.doc)"
          echo -e "  • Single directory wildcard (docs/*.doc)"
          echo -e "  • Multiple file type patterns (.txt, .md)"
          echo -e "  • Nested path patterns (nested/**/*.doc)"
          echo -e "  • No match error handling"
          echo -e "  • Different compression formats (zip, tar, tgz)"
          echo -e "  • Directory structure preservation (preserveGlobStructure: true)"
          echo -e "  • Flattened structure (preserveGlobStructure: false)"
          echo -e "  • Same filename conflict handling\n"