name: Continuous Integration

on:
  pull_request:
  push:
    branches:
      - main
    paths-ignore:
      - '.github/workflows/**'
      - '**/*.md'
      - 'backup/**'
  workflow_dispatch:

permissions:
  contents: read

jobs:
  test-compression-formats:
    name: Test Compression Formats
    runs-on: ubuntu-latest
    strategy:
      matrix:
        format: [zip, tar, tgz, tbz2]
        include_root: [true, false]
        source: [test2]
        dest_config:
          - type: default
            dest: ''
            destfilename: ''
          - type: custom
            dest: 'custom_output'
            destfilename: 'custom_archive'
      fail-fast: false

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create Test Files and Directories
        run: |
          mkdir -p test2 test3 custom_output
          echo "Test content for test2" > test2/test2.txt
          
          echo "Created directories and files:"
          ls -la test2/
          if [ "${{ matrix.dest_config.type }}" = "custom" ]; then
            ls -la ${{ matrix.dest_config.dest }}/
          fi

      - name: Test Compression
        id: compress
        uses: ./
        with:
          command: 'compress'
          source: './${{ matrix.source }}'
          format: ${{ matrix.format }}
          includeRoot: ${{ matrix.include_root }}
          dest: ${{ matrix.dest_config.dest }}
          destfilename: ${{ matrix.dest_config.destfilename }}
          verbose: 'true'

      # Set the correct source path based on configuration
      - name: Set Source Path
        id: set-path
        run: |
          if [ "${{ matrix.dest_config.type }}" = "custom" ]; then
            echo "source_path=${{ matrix.dest_config.dest }}/${{ matrix.dest_config.destfilename }}.${{ matrix.format }}" >> $GITHUB_OUTPUT
          else
            if [ "${{ matrix.include_root }}" = "true" ]; then
              echo "source_path=./${{ matrix.source }}.${{ matrix.format }}" >> $GITHUB_OUTPUT
            else
              echo "source_path=./${{ matrix.source }}/${{ matrix.source }}.${{ matrix.format }}" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Upload Compressed Artifact
        uses: actions/upload-artifact@v4
        with:
          name: compressed-${{ matrix.format }}-${{ matrix.source }}-root-${{ matrix.include_root }}-dest-${{ matrix.dest_config.type }}
          path: ${{ steps.set-path.outputs.source_path }}
          if-no-files-found: error

      - name: Test Decompression
        uses: ./
        with:
          command: 'decompress'
          source: ${{ steps.set-path.outputs.source_path }}
          format: ${{ matrix.format }}
          dest: './unpacked-${{ matrix.format }}-${{ matrix.source }}'

      - name: Verify Contents
        run: |
          # Define colors for better readability
          GREEN='\033[0;32m'
          RED='\033[0;31m'
          YELLOW='\033[0;33m'
          BLUE='\033[0;34m'
          BOLD='\033[1m'
          NC='\033[0m' # No Color
          
          echo -e "\n${BOLD}${BLUE}======== TEST CONFIGURATION ========${NC}"
          echo -e "${BOLD}Format:${NC}      ${YELLOW}${{ matrix.format }}${NC}"
          echo -e "${BOLD}Include Root:${NC} ${YELLOW}${{ matrix.include_root }}${NC}"
          echo -e "${BOLD}Destination:${NC}  ${YELLOW}${{ matrix.dest_config.type }}${NC}"
          echo -e "${BOLD}Source Path:${NC}  ${YELLOW}${{ steps.set-path.outputs.source_path }}${NC}"
          echo -e "${BOLD}Extract Path:${NC} ${YELLOW}./unpacked-${{ matrix.format }}-${{ matrix.source }}${NC}\n"
          
          # Check if unpacked directory exists
          if [ ! -d "./unpacked-${{ matrix.format }}-${{ matrix.source }}" ]; then
            echo -e "${RED}❌ FAILED: Unpacked directory does not exist!${NC}"
            exit 1
          fi
          
          echo -e "${BOLD}${BLUE}======== UNPACKED DIRECTORY STRUCTURE ========${NC}"
          find "./unpacked-${{ matrix.format }}-${{ matrix.source }}" -type f | sort | sed 's/^/  /'
          echo ""
          
          # Different verification based on includeRoot setting
          if [ "${{ matrix.include_root }}" = "true" ]; then
            echo -e "${BOLD}${BLUE}======== VERIFYING WITH ROOT DIRECTORY ========${NC}"
            expected_path="./unpacked-${{ matrix.format }}-${{ matrix.source }}/${{ matrix.source }}/${{ matrix.source }}.txt"
            
            if [ -f "$expected_path" ]; then
              echo -e "${GREEN}✅ SUCCESS: Root directory structure preserved${NC}"
              echo -e "${BOLD}Content of $expected_path:${NC}"
              echo -e "${YELLOW}$(cat "$expected_path")${NC}"
            else
              echo -e "${RED}❌ FAILED: Expected file $expected_path not found!${NC}"
              exit 1
            fi
          else
            echo -e "${BOLD}${BLUE}======== VERIFYING WITHOUT ROOT DIRECTORY ========${NC}"
            expected_path="./unpacked-${{ matrix.format }}-${{ matrix.source }}/${{ matrix.source }}.txt"
            
            if [ -f "$expected_path" ]; then
              echo -e "${GREEN}✅ SUCCESS: Files extracted without root directory${NC}"
              echo -e "${BOLD}Content of $expected_path:${NC}"
              echo -e "${YELLOW}$(cat "$expected_path")${NC}"
            else
              echo -e "${RED}❌ FAILED: Expected file $expected_path not found!${NC}"
              exit 1
            fi
          fi
          
          echo -e "\n${GREEN}${BOLD}✓ ALL VERIFICATION TESTS PASSED${NC}\n"

      - name: Print Compression Output
        run: |
          echo "Compression output for ${{ matrix.format }} (includeRoot: ${{ matrix.include_root }}): ${{ steps.compress.outputs.file_path }}"

  test-features-and-errors:
    name: Test Features and Error Handling
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Case 1: Should fail (fail_on_error: true)
      - name: Test Non-existent Source (with fail_on_error)
        id: test_fail
        uses: ./
        continue-on-error: true  # Allow the workflow to continue even if this step fails
        with:
          command: 'compress'
          source: './nonexistent'
          format: 'zip'
          fail_on_error: 'true'
          verbose: 'true'

      - name: Verify Expected Failure
        run: |
          # Define colors for better readability
          GREEN='\033[0;32m'
          RED='\033[0;31m'
          YELLOW='\033[0;33m'
          BLUE='\033[0;34m'
          BOLD='\033[1m'
          NC='\033[0m' # No Color
          
          echo -e "\n${BOLD}${BLUE}======== TEST CASE: EXPECTED FAILURE ========${NC}"
          echo -e "${BOLD}Test:${NC} Non-existent source with fail_on_error=true"
          echo -e "${BOLD}Expected Outcome:${NC} Action should fail"
          echo -e "${BOLD}Actual Outcome:${NC} ${YELLOW}${{ steps.test_fail.outcome }}${NC}\n"
          
          if [ "${{ steps.test_fail.outcome }}" != "failure" ]; then
            echo -e "${RED}❌ TEST FAILED: Expected failure but got success${NC}"
            exit 1
          else
            echo -e "${GREEN}✅ TEST PASSED: Action failed as expected with fail_on_error=true${NC}"
          fi

      # Case 2: Should complete with warning (fail_on_error: false)
      - name: Test Non-existent Source (without fail_on_error)
        id: test_no_fail
        uses: ./
        with:
          command: 'compress'
          source: './nonexistent'
          format: 'zip'
          fail_on_error: 'false'
          verbose: 'true'

      - name: Verify Warning Behavior
        run: |
          # Define colors for better readability
          GREEN='\033[0;32m'
          RED='\033[0;31m'
          YELLOW='\033[0;33m'
          BLUE='\033[0;34m'
          BOLD='\033[1m'
          NC='\033[0m' # No Color
          
          echo -e "\n${BOLD}${BLUE}======== TEST CASE: WARNING BEHAVIOR ========${NC}"
          echo -e "${BOLD}Test:${NC} Non-existent source with fail_on_error=false"
          echo -e "${BOLD}Expected Outcome:${NC} Action should complete with warning"
          echo -e "${BOLD}Actual Outcome:${NC} ${YELLOW}${{ steps.test_no_fail.outcome }}${NC}\n"
          
          if [ "${{ steps.test_no_fail.outcome }}" = "success" ]; then
            echo -e "${GREEN}✅ TEST PASSED: Action completed with warning as expected${NC}"
          else
            echo -e "${RED}❌ TEST FAILED: Action failed when it should have completed with warning${NC}"
            exit 1
          fi

      # Additional test case for valid source but with warning
      - name: Create Test Directory with Warning Case
        run: |
          mkdir -p test_warning
          touch test_warning/.gitkeep
          
          # Define colors for better readability
          BLUE='\033[0;34m'
          BOLD='\033[1m'
          NC='\033[0m' # No Color
          
          echo -e "\n${BOLD}${BLUE}======== PREPARING TEST CASE: EMPTY DIRECTORY ========${NC}"
          echo -e "Created empty test directory with only .gitkeep file:"
          ls -la test_warning/

      - name: Test Valid Source with Warning
        id: test_warning
        uses: ./
        with:
          command: 'compress'
          source: './test_warning'
          format: 'zip'
          fail_on_error: 'false'
          verbose: 'true'

      - name: Verify Warning Case
        run: |
          # Define colors for better readability
          GREEN='\033[0;32m'
          RED='\033[0;31m'
          YELLOW='\033[0;33m'
          BLUE='\033[0;34m'
          BOLD='\033[1m'
          NC='\033[0m' # No Color
          
          echo -e "\n${BOLD}${BLUE}======== TEST CASE: EMPTY DIRECTORY ========${NC}"
          echo -e "${BOLD}Test:${NC} Empty directory with fail_on_error=false"
          echo -e "${BOLD}Expected Outcome:${NC} Action should complete successfully"
          echo -e "${BOLD}Actual Outcome:${NC} ${YELLOW}${{ steps.test_warning.outcome }}${NC}\n"
          
          if [ "${{ steps.test_warning.outcome }}" = "success" ]; then
            echo -e "${GREEN}✅ TEST PASSED: Action completed successfully with empty directory${NC}"
          else
            echo -e "${RED}❌ TEST FAILED: Action failed with empty directory${NC}"
            exit 1
          fi
          
      - name: Test Summary
        run: |
          # Define colors for better readability
          GREEN='\033[0;32m'
          BLUE='\033[0;34m'
          BOLD='\033[1m'
          NC='\033[0m' # No Color
          
          echo -e "\n${BOLD}${BLUE}======== ERROR HANDLING TEST SUMMARY ========${NC}"
          echo -e "${GREEN}${BOLD}✓ All error handling tests passed successfully${NC}"
          echo -e "${BOLD}Tests verified:${NC}"
          echo -e "  • Expected failure with fail_on_error=true"
          echo -e "  • Warning behavior with fail_on_error=false"
          echo -e "  • Empty directory handling\n"

  test-github-workspace:
    name: Test GitHub Workspace Path
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create Test Files
        run: |
          echo "Test content" > test.txt
          mkdir -p subdir
          echo "Subdir content" > subdir/subdir.txt
          echo "Created test files:"
          ls -la
          ls -la subdir/

      # Case 1: GitHub Workspace with default settings
      - name: Test GitHub Workspace Path (Default)
        id: test_workspace_default
        uses: ./
        with:
          command: compress
          source: ${{ github.workspace }}
          format: zip
          dest: './output'
          destfilename: 'workspace_default'
          verbose: 'true'

      # Case 2: GitHub Workspace with includeRoot false
      - name: Test GitHub Workspace Path (No Root)
        id: test_workspace_no_root
        uses: ./
        with:
          command: compress
          source: ${{ github.workspace }}
          format: zip
          includeRoot: 'false'
          dest: './output'
          destfilename: 'workspace_no_root'
          verbose: 'true'

      # Verify the results
      - name: Verify Compression Results
        run: |
          # Define colors for better readability
          GREEN='\033[0;32m'
          RED='\033[0;31m'
          YELLOW='\033[0;33m'
          BLUE='\033[0;34m'
          BOLD='\033[1m'
          NC='\033[0m' # No Color
          
          echo -e "\n${BOLD}${BLUE}======== GITHUB WORKSPACE COMPRESSION TEST ========${NC}"
          echo -e "${BOLD}Output Directory Contents:${NC}"
          ls -la ./output/ | sed 's/^/  /'
          
          # Test default case (includeRoot: true)
          echo -e "\n${BOLD}${BLUE}======== CASE 1: DEFAULT WORKSPACE COMPRESSION ========${NC}"
          if [ -f "./output/workspace_default.zip" ]; then
            echo -e "${GREEN}✅ SUCCESS: Default workspace compression${NC}"
            echo -e "${BOLD}Archive Contents:${NC}"
            unzip -l ./output/workspace_default.zip | sed 's/^/  /'
          else
            echo -e "${RED}❌ FAILED: Default workspace compression${NC}"
            exit 1
          fi
          
          # Test no root case (includeRoot: false)
          echo -e "\n${BOLD}${BLUE}======== CASE 2: NO ROOT WORKSPACE COMPRESSION ========${NC}"
          if [ -f "./output/workspace_no_root.zip" ]; then
            echo -e "${GREEN}✅ SUCCESS: No root workspace compression${NC}"
            echo -e "${BOLD}Archive Contents:${NC}"
            unzip -l ./output/workspace_no_root.zip | sed 's/^/  /'
          else
            echo -e "${RED}❌ FAILED: No root workspace compression${NC}"
            exit 1
          fi

      # Test decompression
      - name: Test Decompression (Default)
        uses: ./
        with:
          command: decompress
          source: ./output/workspace_default.zip
          format: zip
          dest: './extracted_default'
          verbose: 'true'

      - name: Test Decompression (No Root)
        uses: ./
        with:
          command: decompress
          source: ./output/workspace_no_root.zip
          format: zip
          dest: './extracted_no_root'
          verbose: 'true'

      - name: Verify Decompression Results
        run: |
          echo "Checking extracted contents (Default):"
          ls -la ./extracted_default/
          
          echo "Checking extracted contents (No Root):"
          ls -la ./extracted_no_root/
          
          # Verify file contents for default case (with workspace directory)
          if [ -f "./extracted_default/workspace/test.txt" ] && [ -f "./extracted_default/workspace/subdir/subdir.txt" ]; then
            echo "✅ Default extraction verified"
          else
            echo "❌ Default extraction failed"
            exit 1
          fi
          
          # Verify file contents for no root case (files directly in directory)
          if [ -f "./extracted_no_root/test.txt" ] && [ -f "./extracted_no_root/subdir/subdir.txt" ]; then
            echo "✅ No root extraction verified"
          else
            echo "❌ No root extraction failed"
            exit 1
          fi

  test-github-workspace-paths:
    name: Test GitHub Workspace Path Variants
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create Test Files
        run: |
          echo "Test content 1" > test1.txt
          echo "Test content 2" > test2.txt
          mkdir -p subdir
          echo "Subdir content" > subdir/test3.txt
          
          echo "Created test files:"
          ls -la
          ls -la subdir/

      # Case 1: Direct github.workspace variable
      - name: Test Direct Workspace Path
        id: test_direct
        uses: ./
        with:
          command: compress
          source: ${{ github.workspace }}
          format: zip
          dest: './output1'
          destfilename: 'direct_workspace'
          verbose: 'true'
          includeRoot: 'false'

      # Case 2: Workspace path with space
      - name: Test Workspace Path with Space
        id: test_with_space
        uses: ./
        with:
          command: compress
          source: ' ${{ github.workspace }}'
          format: zip
          dest: './output2'
          destfilename: 'space_workspace'
          verbose: 'true'
          includeRoot: 'false'

      # Verify both archives
      - name: Verify Compression Results
        run: |
          echo "Checking output directories contents:"
          ls -la ./output1/
          ls -la ./output2/
          
          # Test direct case
          if [ -f "./output1/direct_workspace.zip" ]; then
            echo "✅ Direct workspace compression successful"
            unzip -l ./output1/direct_workspace.zip
          else
            echo "❌ Direct workspace compression failed"
            exit 1
          fi
          
          # Test space case
          if [ -f "./output2/space_workspace.zip" ]; then
            echo "✅ Space workspace compression successful"
            unzip -l ./output2/space_workspace.zip
          else
            echo "❌ Space workspace compression failed"
            exit 1
          fi

      # Test decompression for both cases
      - name: Test Decompression (Direct)
        uses: ./
        with:
          command: decompress
          source: ./output1/direct_workspace.zip
          format: zip
          dest: './extracted_direct'
          verbose: 'true'

      - name: Test Decompression (Space)
        uses: ./
        with:
          command: decompress
          source: ./output2/space_workspace.zip
          format: zip
          dest: './extracted_space'
          verbose: 'true'

      - name: Verify Decompression Results
        run: |
          echo "Checking extracted contents (Direct):"
          ls -la ./extracted_direct/
          
          echo "Checking extracted contents (Space):"
          ls -la ./extracted_space/
          
          # Verify file contents for both cases
          for dir in "./extracted_direct" "./extracted_space"; do
            if [ -f "$dir/test1.txt" ] && [ -f "$dir/test2.txt" ] && [ -f "$dir/subdir/test3.txt" ]; then
              echo "✅ Extraction verified for $dir"
              echo "Contents of test files:"
              cat "$dir/test1.txt"
              cat "$dir/test2.txt"
              cat "$dir/subdir/test3.txt"
            else
              echo "❌ Extraction failed for $dir"
              exit 1
            fi
          done

  test-exclude-functionality:
    name: Test Exclude Functionality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create Test Structure
        run: |
          # Creating a Test Directory Structure
          mkdir -p test_exclude/include_folder test_exclude/exclude_folder
          mkdir -p test_exclude/mixed_folder
          
          # Create a file to be included
          echo "File to include" > test_exclude/include_file.txt
          echo "Folder file to include" > test_exclude/include_folder/include.txt
          
          # Create a file to be excluded
          echo "File to exclude" > test_exclude/exclude_file.txt
          echo "Folder file to exclude" > test_exclude/exclude_folder/exclude.txt
          
          # Create a mixed file
          echo "Mixed file 1 - include" > test_exclude/mixed_folder/file1.txt
          echo "Mixed file 2 - exclude" > test_exclude/mixed_folder/file2.log
          
          # Check the created structure
          echo "Created test structure:"
          find test_exclude -type f | sort

      - name: Test Single File Exclusion
        id: exclude_single_file
        uses: ./
        with:
          command: 'compress'
          source: './test_exclude'
          format: 'zip'
          dest: './output'
          destfilename: 'single_file_exclude'
          exclude: 'exclude_file.txt'
          verbose: 'true'

      - name: Test Directory Exclusion
        id: exclude_directory
        uses: ./
        with:
          command: 'compress'
          source: './test_exclude'
          format: 'zip'
          dest: './output'
          destfilename: 'directory_exclude'
          exclude: 'exclude_folder'
          verbose: 'true'

      - name: Test Multiple Exclusions
        id: exclude_multiple
        uses: ./
        with:
          command: 'compress'
          source: './test_exclude'
          format: 'zip'
          dest: './output'
          destfilename: 'multiple_exclude'
          exclude: 'exclude_file.txt exclude_folder/* mixed_folder/*.log'
          verbose: 'true'

      - name: Test Wildcard Pattern Exclusion
        id: exclude_pattern
        uses: ./
        with:
          command: 'compress'
          source: './test_exclude'
          format: 'zip'
          dest: './output'
          destfilename: 'pattern_exclude'
          exclude: '*.log'
          verbose: 'true'

      - name: Verify Exclusion Results
        run: |
          echo "Checking compressed archives contents:"
          mkdir -p verify
          
          # Check single file exclusion
          unzip -l ./output/single_file_exclude.zip
          unzip -q ./output/single_file_exclude.zip -d ./verify/single_file
          echo "Single file exclusion contents:"
          find ./verify/single_file -type f | sort
          if grep -q "exclude_file.txt" <(find ./verify/single_file -type f); then
            echo "❌ Exclusion failed: exclude_file.txt was found when it should be excluded"
            exit 1
          else
            echo "✅ Single file exclusion successful"
          fi
          
          # Check directory exclusion
          unzip -l ./output/directory_exclude.zip
          unzip -q ./output/directory_exclude.zip -d ./verify/directory
          echo "Directory exclusion contents:"
          find ./verify/directory -type f | sort
          if grep -q "exclude_folder" <(find ./verify/directory -type d); then
            echo "❌ Exclusion failed: exclude_folder was found when it should be excluded"
            exit 1
          else
            echo "✅ Directory exclusion successful"
          fi
          
          # Check multiple exclusion
          unzip -l ./output/multiple_exclude.zip
          unzip -q ./output/multiple_exclude.zip -d ./verify/multiple
          echo "Multiple exclusion contents:"
          find ./verify/multiple -type f | sort
          
          EXCLUSION_FAILED=false
          if grep -q "exclude_file.txt" <(find ./verify/multiple -type f); then
            echo "❌ Exclusion failed: exclude_file.txt was found"
            EXCLUSION_FAILED=true
          fi
          
          if grep -q "exclude_folder" <(find ./verify/multiple -type d); then
            echo "❌ Exclusion failed: exclude_folder was found"
            EXCLUSION_FAILED=true
          fi
          
          if grep -q ".log" <(find ./verify/multiple/mixed_folder -type f 2>/dev/null || echo ""); then
            echo "❌ Exclusion failed: .log files were found in mixed_folder"
            EXCLUSION_FAILED=true
          fi
          
          if [ "$EXCLUSION_FAILED" = "false" ]; then
            echo "✅ Multiple exclusion successful"
          else
            exit 1
          fi
          
          # Check pattern exclusion
          unzip -l ./output/pattern_exclude.zip
          unzip -q ./output/pattern_exclude.zip -d ./verify/pattern
          echo "Pattern exclusion contents:"
          find ./verify/pattern -type f | sort
          if grep -q ".log" <(find ./verify/pattern -type f); then
            echo "❌ Exclusion failed: .log files were found when they should be excluded"
            exit 1
          else
            echo "✅ Pattern exclusion successful"
          fi

      - name: Test TAR Format with Exclusion
        id: exclude_tar
        uses: ./
        with:
          command: 'compress'
          source: './test_exclude'
          format: 'tar'
          dest: './output'
          destfilename: 'tar_exclude'
          exclude: 'exclude_file.txt exclude_folder'
          verbose: 'true'

      - name: Verify TAR Exclusion
        run: |
          echo "Checking TAR archive contents:"
          mkdir -p verify/tar
          tar -tvf ./output/tar_exclude.tar
          tar -xf ./output/tar_exclude.tar -C ./verify/tar
          
          echo "TAR exclusion contents:"
          find ./verify/tar -type f | sort
          
          EXCLUSION_FAILED=false
          if grep -q "exclude_file.txt" <(find ./verify/tar -type f); then
            echo "❌ TAR Exclusion failed: exclude_file.txt was found"
            EXCLUSION_FAILED=true
          fi
          
          if grep -q "exclude_folder" <(find ./verify/tar -type d); then
            echo "❌ TAR Exclusion failed: exclude_folder was found"
            EXCLUSION_FAILED=true
          fi
          
          if [ "$EXCLUSION_FAILED" = "false" ]; then
            echo "✅ TAR exclusion successful"
          else
            exit 1
          fi